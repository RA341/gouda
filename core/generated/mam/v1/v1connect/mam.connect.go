// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mam/v1/mam.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/gouda/generated/mam/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MamServiceName is the fully-qualified name of the MamService service.
	MamServiceName = "mam.v1.MamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MamServiceSearchProcedure is the fully-qualified name of the MamService's Search RPC.
	MamServiceSearchProcedure = "/mam.v1.MamService/Search"
	// MamServiceBuyVipProcedure is the fully-qualified name of the MamService's BuyVip RPC.
	MamServiceBuyVipProcedure = "/mam.v1.MamService/BuyVip"
	// MamServiceGetThumbnailProcedure is the fully-qualified name of the MamService's GetThumbnail RPC.
	MamServiceGetThumbnailProcedure = "/mam.v1.MamService/GetThumbnail"
	// MamServiceGetProfileProcedure is the fully-qualified name of the MamService's GetProfile RPC.
	MamServiceGetProfileProcedure = "/mam.v1.MamService/GetProfile"
	// MamServiceBuyBonusProcedure is the fully-qualified name of the MamService's BuyBonus RPC.
	MamServiceBuyBonusProcedure = "/mam.v1.MamService/BuyBonus"
	// MamServiceIsMamSetupProcedure is the fully-qualified name of the MamService's IsMamSetup RPC.
	MamServiceIsMamSetupProcedure = "/mam.v1.MamService/IsMamSetup"
)

// MamServiceClient is a client for the mam.v1.MamService service.
type MamServiceClient interface {
	Search(context.Context, *connect.Request[v1.Query]) (*connect.Response[v1.SearchResults], error)
	BuyVip(context.Context, *connect.Request[v1.VipRequest]) (*connect.Response[v1.VipResponse], error)
	GetThumbnail(context.Context, *connect.Request[v1.GetThumbnailRequest]) (*connect.Response[v1.GetThumbnailResponse], error)
	GetProfile(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.UserData], error)
	BuyBonus(context.Context, *connect.Request[v1.BonusRequest]) (*connect.Response[v1.BonusResponse], error)
	IsMamSetup(context.Context, *connect.Request[v1.IsMamSetupRequest]) (*connect.Response[v1.IsMamSetupResponse], error)
}

// NewMamServiceClient constructs a client for the mam.v1.MamService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mamServiceMethods := v1.File_mam_v1_mam_proto.Services().ByName("MamService").Methods()
	return &mamServiceClient{
		search: connect.NewClient[v1.Query, v1.SearchResults](
			httpClient,
			baseURL+MamServiceSearchProcedure,
			connect.WithSchema(mamServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		buyVip: connect.NewClient[v1.VipRequest, v1.VipResponse](
			httpClient,
			baseURL+MamServiceBuyVipProcedure,
			connect.WithSchema(mamServiceMethods.ByName("BuyVip")),
			connect.WithClientOptions(opts...),
		),
		getThumbnail: connect.NewClient[v1.GetThumbnailRequest, v1.GetThumbnailResponse](
			httpClient,
			baseURL+MamServiceGetThumbnailProcedure,
			connect.WithSchema(mamServiceMethods.ByName("GetThumbnail")),
			connect.WithClientOptions(opts...),
		),
		getProfile: connect.NewClient[v1.Empty, v1.UserData](
			httpClient,
			baseURL+MamServiceGetProfileProcedure,
			connect.WithSchema(mamServiceMethods.ByName("GetProfile")),
			connect.WithClientOptions(opts...),
		),
		buyBonus: connect.NewClient[v1.BonusRequest, v1.BonusResponse](
			httpClient,
			baseURL+MamServiceBuyBonusProcedure,
			connect.WithSchema(mamServiceMethods.ByName("BuyBonus")),
			connect.WithClientOptions(opts...),
		),
		isMamSetup: connect.NewClient[v1.IsMamSetupRequest, v1.IsMamSetupResponse](
			httpClient,
			baseURL+MamServiceIsMamSetupProcedure,
			connect.WithSchema(mamServiceMethods.ByName("IsMamSetup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mamServiceClient implements MamServiceClient.
type mamServiceClient struct {
	search       *connect.Client[v1.Query, v1.SearchResults]
	buyVip       *connect.Client[v1.VipRequest, v1.VipResponse]
	getThumbnail *connect.Client[v1.GetThumbnailRequest, v1.GetThumbnailResponse]
	getProfile   *connect.Client[v1.Empty, v1.UserData]
	buyBonus     *connect.Client[v1.BonusRequest, v1.BonusResponse]
	isMamSetup   *connect.Client[v1.IsMamSetupRequest, v1.IsMamSetupResponse]
}

// Search calls mam.v1.MamService.Search.
func (c *mamServiceClient) Search(ctx context.Context, req *connect.Request[v1.Query]) (*connect.Response[v1.SearchResults], error) {
	return c.search.CallUnary(ctx, req)
}

// BuyVip calls mam.v1.MamService.BuyVip.
func (c *mamServiceClient) BuyVip(ctx context.Context, req *connect.Request[v1.VipRequest]) (*connect.Response[v1.VipResponse], error) {
	return c.buyVip.CallUnary(ctx, req)
}

// GetThumbnail calls mam.v1.MamService.GetThumbnail.
func (c *mamServiceClient) GetThumbnail(ctx context.Context, req *connect.Request[v1.GetThumbnailRequest]) (*connect.Response[v1.GetThumbnailResponse], error) {
	return c.getThumbnail.CallUnary(ctx, req)
}

// GetProfile calls mam.v1.MamService.GetProfile.
func (c *mamServiceClient) GetProfile(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.UserData], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// BuyBonus calls mam.v1.MamService.BuyBonus.
func (c *mamServiceClient) BuyBonus(ctx context.Context, req *connect.Request[v1.BonusRequest]) (*connect.Response[v1.BonusResponse], error) {
	return c.buyBonus.CallUnary(ctx, req)
}

// IsMamSetup calls mam.v1.MamService.IsMamSetup.
func (c *mamServiceClient) IsMamSetup(ctx context.Context, req *connect.Request[v1.IsMamSetupRequest]) (*connect.Response[v1.IsMamSetupResponse], error) {
	return c.isMamSetup.CallUnary(ctx, req)
}

// MamServiceHandler is an implementation of the mam.v1.MamService service.
type MamServiceHandler interface {
	Search(context.Context, *connect.Request[v1.Query]) (*connect.Response[v1.SearchResults], error)
	BuyVip(context.Context, *connect.Request[v1.VipRequest]) (*connect.Response[v1.VipResponse], error)
	GetThumbnail(context.Context, *connect.Request[v1.GetThumbnailRequest]) (*connect.Response[v1.GetThumbnailResponse], error)
	GetProfile(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.UserData], error)
	BuyBonus(context.Context, *connect.Request[v1.BonusRequest]) (*connect.Response[v1.BonusResponse], error)
	IsMamSetup(context.Context, *connect.Request[v1.IsMamSetupRequest]) (*connect.Response[v1.IsMamSetupResponse], error)
}

// NewMamServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMamServiceHandler(svc MamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mamServiceMethods := v1.File_mam_v1_mam_proto.Services().ByName("MamService").Methods()
	mamServiceSearchHandler := connect.NewUnaryHandler(
		MamServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(mamServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	mamServiceBuyVipHandler := connect.NewUnaryHandler(
		MamServiceBuyVipProcedure,
		svc.BuyVip,
		connect.WithSchema(mamServiceMethods.ByName("BuyVip")),
		connect.WithHandlerOptions(opts...),
	)
	mamServiceGetThumbnailHandler := connect.NewUnaryHandler(
		MamServiceGetThumbnailProcedure,
		svc.GetThumbnail,
		connect.WithSchema(mamServiceMethods.ByName("GetThumbnail")),
		connect.WithHandlerOptions(opts...),
	)
	mamServiceGetProfileHandler := connect.NewUnaryHandler(
		MamServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(mamServiceMethods.ByName("GetProfile")),
		connect.WithHandlerOptions(opts...),
	)
	mamServiceBuyBonusHandler := connect.NewUnaryHandler(
		MamServiceBuyBonusProcedure,
		svc.BuyBonus,
		connect.WithSchema(mamServiceMethods.ByName("BuyBonus")),
		connect.WithHandlerOptions(opts...),
	)
	mamServiceIsMamSetupHandler := connect.NewUnaryHandler(
		MamServiceIsMamSetupProcedure,
		svc.IsMamSetup,
		connect.WithSchema(mamServiceMethods.ByName("IsMamSetup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mam.v1.MamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MamServiceSearchProcedure:
			mamServiceSearchHandler.ServeHTTP(w, r)
		case MamServiceBuyVipProcedure:
			mamServiceBuyVipHandler.ServeHTTP(w, r)
		case MamServiceGetThumbnailProcedure:
			mamServiceGetThumbnailHandler.ServeHTTP(w, r)
		case MamServiceGetProfileProcedure:
			mamServiceGetProfileHandler.ServeHTTP(w, r)
		case MamServiceBuyBonusProcedure:
			mamServiceBuyBonusHandler.ServeHTTP(w, r)
		case MamServiceIsMamSetupProcedure:
			mamServiceIsMamSetupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMamServiceHandler struct{}

func (UnimplementedMamServiceHandler) Search(context.Context, *connect.Request[v1.Query]) (*connect.Response[v1.SearchResults], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mam.v1.MamService.Search is not implemented"))
}

func (UnimplementedMamServiceHandler) BuyVip(context.Context, *connect.Request[v1.VipRequest]) (*connect.Response[v1.VipResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mam.v1.MamService.BuyVip is not implemented"))
}

func (UnimplementedMamServiceHandler) GetThumbnail(context.Context, *connect.Request[v1.GetThumbnailRequest]) (*connect.Response[v1.GetThumbnailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mam.v1.MamService.GetThumbnail is not implemented"))
}

func (UnimplementedMamServiceHandler) GetProfile(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.UserData], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mam.v1.MamService.GetProfile is not implemented"))
}

func (UnimplementedMamServiceHandler) BuyBonus(context.Context, *connect.Request[v1.BonusRequest]) (*connect.Response[v1.BonusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mam.v1.MamService.BuyBonus is not implemented"))
}

func (UnimplementedMamServiceHandler) IsMamSetup(context.Context, *connect.Request[v1.IsMamSetupRequest]) (*connect.Response[v1.IsMamSetupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mam.v1.MamService.IsMamSetup is not implemented"))
}
