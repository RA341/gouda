// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/gouda/generated/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/auth.v1.AuthService/Login"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/auth.v1.AuthService/Logout"
	// AuthServiceUserListProcedure is the fully-qualified name of the AuthService's UserList RPC.
	AuthServiceUserListProcedure = "/auth.v1.AuthService/UserList"
	// AuthServiceUserAddProcedure is the fully-qualified name of the AuthService's UserAdd RPC.
	AuthServiceUserAddProcedure = "/auth.v1.AuthService/UserAdd"
	// AuthServiceUserDeleteProcedure is the fully-qualified name of the AuthService's UserDelete RPC.
	AuthServiceUserDeleteProcedure = "/auth.v1.AuthService/UserDelete"
	// AuthServiceUserEditProcedure is the fully-qualified name of the AuthService's UserEdit RPC.
	AuthServiceUserEditProcedure = "/auth.v1.AuthService/UserEdit"
	// AuthServiceVerifySessionProcedure is the fully-qualified name of the AuthService's VerifySession
	// RPC.
	AuthServiceVerifySessionProcedure = "/auth.v1.AuthService/VerifySession"
	// AuthServiceRefreshSessionProcedure is the fully-qualified name of the AuthService's
	// RefreshSession RPC.
	AuthServiceRefreshSessionProcedure = "/auth.v1.AuthService/RefreshSession"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	UserList(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	UserAdd(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	UserEdit(context.Context, *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error)
	VerifySession(context.Context, *connect.Request[v1.VerifySessionRequest]) (*connect.Response[v1.VerifySessionResponse], error)
	RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		userList: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+AuthServiceUserListProcedure,
			connect.WithSchema(authServiceMethods.ByName("UserList")),
			connect.WithClientOptions(opts...),
		),
		userAdd: connect.NewClient[v1.AddUserRequest, v1.AddUserResponse](
			httpClient,
			baseURL+AuthServiceUserAddProcedure,
			connect.WithSchema(authServiceMethods.ByName("UserAdd")),
			connect.WithClientOptions(opts...),
		),
		userDelete: connect.NewClient[v1.UserDeleteRequest, v1.UserDeleteResponse](
			httpClient,
			baseURL+AuthServiceUserDeleteProcedure,
			connect.WithSchema(authServiceMethods.ByName("UserDelete")),
			connect.WithClientOptions(opts...),
		),
		userEdit: connect.NewClient[v1.UserEditRequest, v1.UserEditResponse](
			httpClient,
			baseURL+AuthServiceUserEditProcedure,
			connect.WithSchema(authServiceMethods.ByName("UserEdit")),
			connect.WithClientOptions(opts...),
		),
		verifySession: connect.NewClient[v1.VerifySessionRequest, v1.VerifySessionResponse](
			httpClient,
			baseURL+AuthServiceVerifySessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifySession")),
			connect.WithClientOptions(opts...),
		),
		refreshSession: connect.NewClient[v1.RefreshSessionRequest, v1.RefreshSessionResponse](
			httpClient,
			baseURL+AuthServiceRefreshSessionProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login          *connect.Client[v1.LoginRequest, v1.LoginResponse]
	logout         *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	userList       *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	userAdd        *connect.Client[v1.AddUserRequest, v1.AddUserResponse]
	userDelete     *connect.Client[v1.UserDeleteRequest, v1.UserDeleteResponse]
	userEdit       *connect.Client[v1.UserEditRequest, v1.UserEditResponse]
	verifySession  *connect.Client[v1.VerifySessionRequest, v1.VerifySessionResponse]
	refreshSession *connect.Client[v1.RefreshSessionRequest, v1.RefreshSessionResponse]
}

// Login calls auth.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls auth.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// UserList calls auth.v1.AuthService.UserList.
func (c *authServiceClient) UserList(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.userList.CallUnary(ctx, req)
}

// UserAdd calls auth.v1.AuthService.UserAdd.
func (c *authServiceClient) UserAdd(ctx context.Context, req *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error) {
	return c.userAdd.CallUnary(ctx, req)
}

// UserDelete calls auth.v1.AuthService.UserDelete.
func (c *authServiceClient) UserDelete(ctx context.Context, req *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return c.userDelete.CallUnary(ctx, req)
}

// UserEdit calls auth.v1.AuthService.UserEdit.
func (c *authServiceClient) UserEdit(ctx context.Context, req *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error) {
	return c.userEdit.CallUnary(ctx, req)
}

// VerifySession calls auth.v1.AuthService.VerifySession.
func (c *authServiceClient) VerifySession(ctx context.Context, req *connect.Request[v1.VerifySessionRequest]) (*connect.Response[v1.VerifySessionResponse], error) {
	return c.verifySession.CallUnary(ctx, req)
}

// RefreshSession calls auth.v1.AuthService.RefreshSession.
func (c *authServiceClient) RefreshSession(ctx context.Context, req *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error) {
	return c.refreshSession.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	UserList(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	UserAdd(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	UserEdit(context.Context, *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error)
	VerifySession(context.Context, *connect.Request[v1.VerifySessionRequest]) (*connect.Response[v1.VerifySessionResponse], error)
	RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUserListHandler := connect.NewUnaryHandler(
		AuthServiceUserListProcedure,
		svc.UserList,
		connect.WithSchema(authServiceMethods.ByName("UserList")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUserAddHandler := connect.NewUnaryHandler(
		AuthServiceUserAddProcedure,
		svc.UserAdd,
		connect.WithSchema(authServiceMethods.ByName("UserAdd")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUserDeleteHandler := connect.NewUnaryHandler(
		AuthServiceUserDeleteProcedure,
		svc.UserDelete,
		connect.WithSchema(authServiceMethods.ByName("UserDelete")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUserEditHandler := connect.NewUnaryHandler(
		AuthServiceUserEditProcedure,
		svc.UserEdit,
		connect.WithSchema(authServiceMethods.ByName("UserEdit")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifySessionHandler := connect.NewUnaryHandler(
		AuthServiceVerifySessionProcedure,
		svc.VerifySession,
		connect.WithSchema(authServiceMethods.ByName("VerifySession")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshSessionHandler := connect.NewUnaryHandler(
		AuthServiceRefreshSessionProcedure,
		svc.RefreshSession,
		connect.WithSchema(authServiceMethods.ByName("RefreshSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceUserListProcedure:
			authServiceUserListHandler.ServeHTTP(w, r)
		case AuthServiceUserAddProcedure:
			authServiceUserAddHandler.ServeHTTP(w, r)
		case AuthServiceUserDeleteProcedure:
			authServiceUserDeleteHandler.ServeHTTP(w, r)
		case AuthServiceUserEditProcedure:
			authServiceUserEditHandler.ServeHTTP(w, r)
		case AuthServiceVerifySessionProcedure:
			authServiceVerifySessionHandler.ServeHTTP(w, r)
		case AuthServiceRefreshSessionProcedure:
			authServiceRefreshSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) UserList(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UserList is not implemented"))
}

func (UnimplementedAuthServiceHandler) UserAdd(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UserAdd is not implemented"))
}

func (UnimplementedAuthServiceHandler) UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UserDelete is not implemented"))
}

func (UnimplementedAuthServiceHandler) UserEdit(context.Context, *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UserEdit is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifySession(context.Context, *connect.Request[v1.VerifySessionRequest]) (*connect.Response[v1.VerifySessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.VerifySession is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.RefreshSession is not implemented"))
}
