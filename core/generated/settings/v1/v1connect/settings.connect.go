// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: settings/v1/settings.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/gouda/generated/settings/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SettingsServiceName is the fully-qualified name of the SettingsService service.
	SettingsServiceName = "settings.v1.SettingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SettingsServiceLoadSettingsProcedure is the fully-qualified name of the SettingsService's
	// LoadSettings RPC.
	SettingsServiceLoadSettingsProcedure = "/settings.v1.SettingsService/LoadSettings"
	// SettingsServiceUpdateSettingsProcedure is the fully-qualified name of the SettingsService's
	// UpdateSettings RPC.
	SettingsServiceUpdateSettingsProcedure = "/settings.v1.SettingsService/UpdateSettings"
	// SettingsServiceGetMetadataProcedure is the fully-qualified name of the SettingsService's
	// GetMetadata RPC.
	SettingsServiceGetMetadataProcedure = "/settings.v1.SettingsService/GetMetadata"
	// SettingsServiceListSupportedClientsProcedure is the fully-qualified name of the SettingsService's
	// ListSupportedClients RPC.
	SettingsServiceListSupportedClientsProcedure = "/settings.v1.SettingsService/ListSupportedClients"
	// SettingsServiceTestClientProcedure is the fully-qualified name of the SettingsService's
	// TestClient RPC.
	SettingsServiceTestClientProcedure = "/settings.v1.SettingsService/TestClient"
)

// SettingsServiceClient is a client for the settings.v1.SettingsService service.
type SettingsServiceClient interface {
	LoadSettings(context.Context, *connect.Request[v1.LoadSettingsRequest]) (*connect.Response[v1.LoadSettingsResponse], error)
	UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error)
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	ListSupportedClients(context.Context, *connect.Request[v1.ListSupportedClientsRequest]) (*connect.Response[v1.ListSupportedClientsResponse], error)
	TestClient(context.Context, *connect.Request[v1.TorrentClient]) (*connect.Response[v1.TestTorrentResponse], error)
}

// NewSettingsServiceClient constructs a client for the settings.v1.SettingsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SettingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	settingsServiceMethods := v1.File_settings_v1_settings_proto.Services().ByName("SettingsService").Methods()
	return &settingsServiceClient{
		loadSettings: connect.NewClient[v1.LoadSettingsRequest, v1.LoadSettingsResponse](
			httpClient,
			baseURL+SettingsServiceLoadSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("LoadSettings")),
			connect.WithClientOptions(opts...),
		),
		updateSettings: connect.NewClient[v1.UpdateSettingsRequest, v1.UpdateSettingsResponse](
			httpClient,
			baseURL+SettingsServiceUpdateSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("UpdateSettings")),
			connect.WithClientOptions(opts...),
		),
		getMetadata: connect.NewClient[v1.GetMetadataRequest, v1.GetMetadataResponse](
			httpClient,
			baseURL+SettingsServiceGetMetadataProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("GetMetadata")),
			connect.WithClientOptions(opts...),
		),
		listSupportedClients: connect.NewClient[v1.ListSupportedClientsRequest, v1.ListSupportedClientsResponse](
			httpClient,
			baseURL+SettingsServiceListSupportedClientsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("ListSupportedClients")),
			connect.WithClientOptions(opts...),
		),
		testClient: connect.NewClient[v1.TorrentClient, v1.TestTorrentResponse](
			httpClient,
			baseURL+SettingsServiceTestClientProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("TestClient")),
			connect.WithClientOptions(opts...),
		),
	}
}

// settingsServiceClient implements SettingsServiceClient.
type settingsServiceClient struct {
	loadSettings         *connect.Client[v1.LoadSettingsRequest, v1.LoadSettingsResponse]
	updateSettings       *connect.Client[v1.UpdateSettingsRequest, v1.UpdateSettingsResponse]
	getMetadata          *connect.Client[v1.GetMetadataRequest, v1.GetMetadataResponse]
	listSupportedClients *connect.Client[v1.ListSupportedClientsRequest, v1.ListSupportedClientsResponse]
	testClient           *connect.Client[v1.TorrentClient, v1.TestTorrentResponse]
}

// LoadSettings calls settings.v1.SettingsService.LoadSettings.
func (c *settingsServiceClient) LoadSettings(ctx context.Context, req *connect.Request[v1.LoadSettingsRequest]) (*connect.Response[v1.LoadSettingsResponse], error) {
	return c.loadSettings.CallUnary(ctx, req)
}

// UpdateSettings calls settings.v1.SettingsService.UpdateSettings.
func (c *settingsServiceClient) UpdateSettings(ctx context.Context, req *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error) {
	return c.updateSettings.CallUnary(ctx, req)
}

// GetMetadata calls settings.v1.SettingsService.GetMetadata.
func (c *settingsServiceClient) GetMetadata(ctx context.Context, req *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return c.getMetadata.CallUnary(ctx, req)
}

// ListSupportedClients calls settings.v1.SettingsService.ListSupportedClients.
func (c *settingsServiceClient) ListSupportedClients(ctx context.Context, req *connect.Request[v1.ListSupportedClientsRequest]) (*connect.Response[v1.ListSupportedClientsResponse], error) {
	return c.listSupportedClients.CallUnary(ctx, req)
}

// TestClient calls settings.v1.SettingsService.TestClient.
func (c *settingsServiceClient) TestClient(ctx context.Context, req *connect.Request[v1.TorrentClient]) (*connect.Response[v1.TestTorrentResponse], error) {
	return c.testClient.CallUnary(ctx, req)
}

// SettingsServiceHandler is an implementation of the settings.v1.SettingsService service.
type SettingsServiceHandler interface {
	LoadSettings(context.Context, *connect.Request[v1.LoadSettingsRequest]) (*connect.Response[v1.LoadSettingsResponse], error)
	UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error)
	GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error)
	ListSupportedClients(context.Context, *connect.Request[v1.ListSupportedClientsRequest]) (*connect.Response[v1.ListSupportedClientsResponse], error)
	TestClient(context.Context, *connect.Request[v1.TorrentClient]) (*connect.Response[v1.TestTorrentResponse], error)
}

// NewSettingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingsServiceHandler(svc SettingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	settingsServiceMethods := v1.File_settings_v1_settings_proto.Services().ByName("SettingsService").Methods()
	settingsServiceLoadSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceLoadSettingsProcedure,
		svc.LoadSettings,
		connect.WithSchema(settingsServiceMethods.ByName("LoadSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceUpdateSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceUpdateSettingsProcedure,
		svc.UpdateSettings,
		connect.WithSchema(settingsServiceMethods.ByName("UpdateSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceGetMetadataHandler := connect.NewUnaryHandler(
		SettingsServiceGetMetadataProcedure,
		svc.GetMetadata,
		connect.WithSchema(settingsServiceMethods.ByName("GetMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceListSupportedClientsHandler := connect.NewUnaryHandler(
		SettingsServiceListSupportedClientsProcedure,
		svc.ListSupportedClients,
		connect.WithSchema(settingsServiceMethods.ByName("ListSupportedClients")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceTestClientHandler := connect.NewUnaryHandler(
		SettingsServiceTestClientProcedure,
		svc.TestClient,
		connect.WithSchema(settingsServiceMethods.ByName("TestClient")),
		connect.WithHandlerOptions(opts...),
	)
	return "/settings.v1.SettingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SettingsServiceLoadSettingsProcedure:
			settingsServiceLoadSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceUpdateSettingsProcedure:
			settingsServiceUpdateSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceGetMetadataProcedure:
			settingsServiceGetMetadataHandler.ServeHTTP(w, r)
		case SettingsServiceListSupportedClientsProcedure:
			settingsServiceListSupportedClientsHandler.ServeHTTP(w, r)
		case SettingsServiceTestClientProcedure:
			settingsServiceTestClientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSettingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingsServiceHandler struct{}

func (UnimplementedSettingsServiceHandler) LoadSettings(context.Context, *connect.Request[v1.LoadSettingsRequest]) (*connect.Response[v1.LoadSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.LoadSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.UpdateSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) GetMetadata(context.Context, *connect.Request[v1.GetMetadataRequest]) (*connect.Response[v1.GetMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.GetMetadata is not implemented"))
}

func (UnimplementedSettingsServiceHandler) ListSupportedClients(context.Context, *connect.Request[v1.ListSupportedClientsRequest]) (*connect.Response[v1.ListSupportedClientsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.ListSupportedClients is not implemented"))
}

func (UnimplementedSettingsServiceHandler) TestClient(context.Context, *connect.Request[v1.TorrentClient]) (*connect.Response[v1.TestTorrentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.SettingsService.TestClient is not implemented"))
}
