// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/gouda/generated/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceUserListProcedure is the fully-qualified name of the UserService's UserList RPC.
	UserServiceUserListProcedure = "/user.v1.UserService/UserList"
	// UserServiceUserAddProcedure is the fully-qualified name of the UserService's UserAdd RPC.
	UserServiceUserAddProcedure = "/user.v1.UserService/UserAdd"
	// UserServiceUserDeleteProcedure is the fully-qualified name of the UserService's UserDelete RPC.
	UserServiceUserDeleteProcedure = "/user.v1.UserService/UserDelete"
	// UserServiceUserEditProcedure is the fully-qualified name of the UserService's UserEdit RPC.
	UserServiceUserEditProcedure = "/user.v1.UserService/UserEdit"
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	UserList(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	UserAdd(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	UserEdit(context.Context, *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		userList: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+UserServiceUserListProcedure,
			connect.WithSchema(userServiceMethods.ByName("UserList")),
			connect.WithClientOptions(opts...),
		),
		userAdd: connect.NewClient[v1.AddUserRequest, v1.AddUserResponse](
			httpClient,
			baseURL+UserServiceUserAddProcedure,
			connect.WithSchema(userServiceMethods.ByName("UserAdd")),
			connect.WithClientOptions(opts...),
		),
		userDelete: connect.NewClient[v1.UserDeleteRequest, v1.UserDeleteResponse](
			httpClient,
			baseURL+UserServiceUserDeleteProcedure,
			connect.WithSchema(userServiceMethods.ByName("UserDelete")),
			connect.WithClientOptions(opts...),
		),
		userEdit: connect.NewClient[v1.UserEditRequest, v1.UserEditResponse](
			httpClient,
			baseURL+UserServiceUserEditProcedure,
			connect.WithSchema(userServiceMethods.ByName("UserEdit")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	userList   *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	userAdd    *connect.Client[v1.AddUserRequest, v1.AddUserResponse]
	userDelete *connect.Client[v1.UserDeleteRequest, v1.UserDeleteResponse]
	userEdit   *connect.Client[v1.UserEditRequest, v1.UserEditResponse]
}

// UserList calls user.v1.UserService.UserList.
func (c *userServiceClient) UserList(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.userList.CallUnary(ctx, req)
}

// UserAdd calls user.v1.UserService.UserAdd.
func (c *userServiceClient) UserAdd(ctx context.Context, req *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error) {
	return c.userAdd.CallUnary(ctx, req)
}

// UserDelete calls user.v1.UserService.UserDelete.
func (c *userServiceClient) UserDelete(ctx context.Context, req *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return c.userDelete.CallUnary(ctx, req)
}

// UserEdit calls user.v1.UserService.UserEdit.
func (c *userServiceClient) UserEdit(ctx context.Context, req *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error) {
	return c.userEdit.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	UserList(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	UserAdd(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error)
	UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error)
	UserEdit(context.Context, *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_user_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceUserListHandler := connect.NewUnaryHandler(
		UserServiceUserListProcedure,
		svc.UserList,
		connect.WithSchema(userServiceMethods.ByName("UserList")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUserAddHandler := connect.NewUnaryHandler(
		UserServiceUserAddProcedure,
		svc.UserAdd,
		connect.WithSchema(userServiceMethods.ByName("UserAdd")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUserDeleteHandler := connect.NewUnaryHandler(
		UserServiceUserDeleteProcedure,
		svc.UserDelete,
		connect.WithSchema(userServiceMethods.ByName("UserDelete")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUserEditHandler := connect.NewUnaryHandler(
		UserServiceUserEditProcedure,
		svc.UserEdit,
		connect.WithSchema(userServiceMethods.ByName("UserEdit")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceUserListProcedure:
			userServiceUserListHandler.ServeHTTP(w, r)
		case UserServiceUserAddProcedure:
			userServiceUserAddHandler.ServeHTTP(w, r)
		case UserServiceUserDeleteProcedure:
			userServiceUserDeleteHandler.ServeHTTP(w, r)
		case UserServiceUserEditProcedure:
			userServiceUserEditHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) UserList(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UserList is not implemented"))
}

func (UnimplementedUserServiceHandler) UserAdd(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UserAdd is not implemented"))
}

func (UnimplementedUserServiceHandler) UserDelete(context.Context, *connect.Request[v1.UserDeleteRequest]) (*connect.Response[v1.UserDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UserDelete is not implemented"))
}

func (UnimplementedUserServiceHandler) UserEdit(context.Context, *connect.Request[v1.UserEditRequest]) (*connect.Response[v1.UserEditResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.UserEdit is not implemented"))
}
