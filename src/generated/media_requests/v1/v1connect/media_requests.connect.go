// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: media_requests/v1/media_requests.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/gouda/generated/media_requests/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MediaRequestServiceName is the fully-qualified name of the MediaRequestService service.
	MediaRequestServiceName = "media_requests.v1.MediaRequestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MediaRequestServiceSearchProcedure is the fully-qualified name of the MediaRequestService's
	// Search RPC.
	MediaRequestServiceSearchProcedure = "/media_requests.v1.MediaRequestService/Search"
	// MediaRequestServiceListProcedure is the fully-qualified name of the MediaRequestService's List
	// RPC.
	MediaRequestServiceListProcedure = "/media_requests.v1.MediaRequestService/List"
	// MediaRequestServiceDeleteProcedure is the fully-qualified name of the MediaRequestService's
	// Delete RPC.
	MediaRequestServiceDeleteProcedure = "/media_requests.v1.MediaRequestService/Delete"
	// MediaRequestServiceEditProcedure is the fully-qualified name of the MediaRequestService's Edit
	// RPC.
	MediaRequestServiceEditProcedure = "/media_requests.v1.MediaRequestService/Edit"
	// MediaRequestServiceExistsProcedure is the fully-qualified name of the MediaRequestService's
	// Exists RPC.
	MediaRequestServiceExistsProcedure = "/media_requests.v1.MediaRequestService/Exists"
	// MediaRequestServiceRetryProcedure is the fully-qualified name of the MediaRequestService's Retry
	// RPC.
	MediaRequestServiceRetryProcedure = "/media_requests.v1.MediaRequestService/Retry"
	// MediaRequestServiceAddMediaProcedure is the fully-qualified name of the MediaRequestService's
	// AddMedia RPC.
	MediaRequestServiceAddMediaProcedure = "/media_requests.v1.MediaRequestService/AddMedia"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mediaRequestServiceServiceDescriptor        = v1.File_media_requests_v1_media_requests_proto.Services().ByName("MediaRequestService")
	mediaRequestServiceSearchMethodDescriptor   = mediaRequestServiceServiceDescriptor.Methods().ByName("Search")
	mediaRequestServiceListMethodDescriptor     = mediaRequestServiceServiceDescriptor.Methods().ByName("List")
	mediaRequestServiceDeleteMethodDescriptor   = mediaRequestServiceServiceDescriptor.Methods().ByName("Delete")
	mediaRequestServiceEditMethodDescriptor     = mediaRequestServiceServiceDescriptor.Methods().ByName("Edit")
	mediaRequestServiceExistsMethodDescriptor   = mediaRequestServiceServiceDescriptor.Methods().ByName("Exists")
	mediaRequestServiceRetryMethodDescriptor    = mediaRequestServiceServiceDescriptor.Methods().ByName("Retry")
	mediaRequestServiceAddMediaMethodDescriptor = mediaRequestServiceServiceDescriptor.Methods().ByName("AddMedia")
)

// MediaRequestServiceClient is a client for the media_requests.v1.MediaRequestService service.
type MediaRequestServiceClient interface {
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Edit(context.Context, *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error)
	Exists(context.Context, *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error)
	Retry(context.Context, *connect.Request[v1.RetryRequest]) (*connect.Response[v1.RetryResponse], error)
	AddMedia(context.Context, *connect.Request[v1.AddMediaRequest]) (*connect.Response[v1.AddMediaResponse], error)
}

// NewMediaRequestServiceClient constructs a client for the media_requests.v1.MediaRequestService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMediaRequestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MediaRequestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mediaRequestServiceClient{
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+MediaRequestServiceSearchProcedure,
			connect.WithSchema(mediaRequestServiceSearchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+MediaRequestServiceListProcedure,
			connect.WithSchema(mediaRequestServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+MediaRequestServiceDeleteProcedure,
			connect.WithSchema(mediaRequestServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		edit: connect.NewClient[v1.EditRequest, v1.EditResponse](
			httpClient,
			baseURL+MediaRequestServiceEditProcedure,
			connect.WithSchema(mediaRequestServiceEditMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exists: connect.NewClient[v1.ExistsRequest, v1.ExistsResponse](
			httpClient,
			baseURL+MediaRequestServiceExistsProcedure,
			connect.WithSchema(mediaRequestServiceExistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		retry: connect.NewClient[v1.RetryRequest, v1.RetryResponse](
			httpClient,
			baseURL+MediaRequestServiceRetryProcedure,
			connect.WithSchema(mediaRequestServiceRetryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addMedia: connect.NewClient[v1.AddMediaRequest, v1.AddMediaResponse](
			httpClient,
			baseURL+MediaRequestServiceAddMediaProcedure,
			connect.WithSchema(mediaRequestServiceAddMediaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mediaRequestServiceClient implements MediaRequestServiceClient.
type mediaRequestServiceClient struct {
	search   *connect.Client[v1.SearchRequest, v1.SearchResponse]
	list     *connect.Client[v1.ListRequest, v1.ListResponse]
	delete   *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	edit     *connect.Client[v1.EditRequest, v1.EditResponse]
	exists   *connect.Client[v1.ExistsRequest, v1.ExistsResponse]
	retry    *connect.Client[v1.RetryRequest, v1.RetryResponse]
	addMedia *connect.Client[v1.AddMediaRequest, v1.AddMediaResponse]
}

// Search calls media_requests.v1.MediaRequestService.Search.
func (c *mediaRequestServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// List calls media_requests.v1.MediaRequestService.List.
func (c *mediaRequestServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls media_requests.v1.MediaRequestService.Delete.
func (c *mediaRequestServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Edit calls media_requests.v1.MediaRequestService.Edit.
func (c *mediaRequestServiceClient) Edit(ctx context.Context, req *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error) {
	return c.edit.CallUnary(ctx, req)
}

// Exists calls media_requests.v1.MediaRequestService.Exists.
func (c *mediaRequestServiceClient) Exists(ctx context.Context, req *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error) {
	return c.exists.CallUnary(ctx, req)
}

// Retry calls media_requests.v1.MediaRequestService.Retry.
func (c *mediaRequestServiceClient) Retry(ctx context.Context, req *connect.Request[v1.RetryRequest]) (*connect.Response[v1.RetryResponse], error) {
	return c.retry.CallUnary(ctx, req)
}

// AddMedia calls media_requests.v1.MediaRequestService.AddMedia.
func (c *mediaRequestServiceClient) AddMedia(ctx context.Context, req *connect.Request[v1.AddMediaRequest]) (*connect.Response[v1.AddMediaResponse], error) {
	return c.addMedia.CallUnary(ctx, req)
}

// MediaRequestServiceHandler is an implementation of the media_requests.v1.MediaRequestService
// service.
type MediaRequestServiceHandler interface {
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Edit(context.Context, *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error)
	Exists(context.Context, *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error)
	Retry(context.Context, *connect.Request[v1.RetryRequest]) (*connect.Response[v1.RetryResponse], error)
	AddMedia(context.Context, *connect.Request[v1.AddMediaRequest]) (*connect.Response[v1.AddMediaResponse], error)
}

// NewMediaRequestServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMediaRequestServiceHandler(svc MediaRequestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mediaRequestServiceSearchHandler := connect.NewUnaryHandler(
		MediaRequestServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(mediaRequestServiceSearchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mediaRequestServiceListHandler := connect.NewUnaryHandler(
		MediaRequestServiceListProcedure,
		svc.List,
		connect.WithSchema(mediaRequestServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mediaRequestServiceDeleteHandler := connect.NewUnaryHandler(
		MediaRequestServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(mediaRequestServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mediaRequestServiceEditHandler := connect.NewUnaryHandler(
		MediaRequestServiceEditProcedure,
		svc.Edit,
		connect.WithSchema(mediaRequestServiceEditMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mediaRequestServiceExistsHandler := connect.NewUnaryHandler(
		MediaRequestServiceExistsProcedure,
		svc.Exists,
		connect.WithSchema(mediaRequestServiceExistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mediaRequestServiceRetryHandler := connect.NewUnaryHandler(
		MediaRequestServiceRetryProcedure,
		svc.Retry,
		connect.WithSchema(mediaRequestServiceRetryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mediaRequestServiceAddMediaHandler := connect.NewUnaryHandler(
		MediaRequestServiceAddMediaProcedure,
		svc.AddMedia,
		connect.WithSchema(mediaRequestServiceAddMediaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/media_requests.v1.MediaRequestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MediaRequestServiceSearchProcedure:
			mediaRequestServiceSearchHandler.ServeHTTP(w, r)
		case MediaRequestServiceListProcedure:
			mediaRequestServiceListHandler.ServeHTTP(w, r)
		case MediaRequestServiceDeleteProcedure:
			mediaRequestServiceDeleteHandler.ServeHTTP(w, r)
		case MediaRequestServiceEditProcedure:
			mediaRequestServiceEditHandler.ServeHTTP(w, r)
		case MediaRequestServiceExistsProcedure:
			mediaRequestServiceExistsHandler.ServeHTTP(w, r)
		case MediaRequestServiceRetryProcedure:
			mediaRequestServiceRetryHandler.ServeHTTP(w, r)
		case MediaRequestServiceAddMediaProcedure:
			mediaRequestServiceAddMediaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMediaRequestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMediaRequestServiceHandler struct{}

func (UnimplementedMediaRequestServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media_requests.v1.MediaRequestService.Search is not implemented"))
}

func (UnimplementedMediaRequestServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media_requests.v1.MediaRequestService.List is not implemented"))
}

func (UnimplementedMediaRequestServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media_requests.v1.MediaRequestService.Delete is not implemented"))
}

func (UnimplementedMediaRequestServiceHandler) Edit(context.Context, *connect.Request[v1.EditRequest]) (*connect.Response[v1.EditResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media_requests.v1.MediaRequestService.Edit is not implemented"))
}

func (UnimplementedMediaRequestServiceHandler) Exists(context.Context, *connect.Request[v1.ExistsRequest]) (*connect.Response[v1.ExistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media_requests.v1.MediaRequestService.Exists is not implemented"))
}

func (UnimplementedMediaRequestServiceHandler) Retry(context.Context, *connect.Request[v1.RetryRequest]) (*connect.Response[v1.RetryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media_requests.v1.MediaRequestService.Retry is not implemented"))
}

func (UnimplementedMediaRequestServiceHandler) AddMedia(context.Context, *connect.Request[v1.AddMediaRequest]) (*connect.Response[v1.AddMediaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("media_requests.v1.MediaRequestService.AddMedia is not implemented"))
}
