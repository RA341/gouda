// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: category/v1/category.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/gouda/generated/category/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CategoryServiceName is the fully-qualified name of the CategoryService service.
	CategoryServiceName = "category.v1.CategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CategoryServiceListCategoriesProcedure is the fully-qualified name of the CategoryService's
	// ListCategories RPC.
	CategoryServiceListCategoriesProcedure = "/category.v1.CategoryService/ListCategories"
	// CategoryServiceAddCategoriesProcedure is the fully-qualified name of the CategoryService's
	// AddCategories RPC.
	CategoryServiceAddCategoriesProcedure = "/category.v1.CategoryService/AddCategories"
	// CategoryServiceDeleteCategoriesProcedure is the fully-qualified name of the CategoryService's
	// DeleteCategories RPC.
	CategoryServiceDeleteCategoriesProcedure = "/category.v1.CategoryService/DeleteCategories"
)

// CategoryServiceClient is a client for the category.v1.CategoryService service.
type CategoryServiceClient interface {
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	AddCategories(context.Context, *connect.Request[v1.AddCategoriesRequest]) (*connect.Response[v1.AddCategoriesResponse], error)
	DeleteCategories(context.Context, *connect.Request[v1.DelCategoriesRequest]) (*connect.Response[v1.DelCategoriesResponse], error)
}

// NewCategoryServiceClient constructs a client for the category.v1.CategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	categoryServiceMethods := v1.File_category_v1_category_proto.Services().ByName("CategoryService").Methods()
	return &categoryServiceClient{
		listCategories: connect.NewClient[v1.ListCategoriesRequest, v1.ListCategoriesResponse](
			httpClient,
			baseURL+CategoryServiceListCategoriesProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
			connect.WithClientOptions(opts...),
		),
		addCategories: connect.NewClient[v1.AddCategoriesRequest, v1.AddCategoriesResponse](
			httpClient,
			baseURL+CategoryServiceAddCategoriesProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("AddCategories")),
			connect.WithClientOptions(opts...),
		),
		deleteCategories: connect.NewClient[v1.DelCategoriesRequest, v1.DelCategoriesResponse](
			httpClient,
			baseURL+CategoryServiceDeleteCategoriesProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("DeleteCategories")),
			connect.WithClientOptions(opts...),
		),
	}
}

// categoryServiceClient implements CategoryServiceClient.
type categoryServiceClient struct {
	listCategories   *connect.Client[v1.ListCategoriesRequest, v1.ListCategoriesResponse]
	addCategories    *connect.Client[v1.AddCategoriesRequest, v1.AddCategoriesResponse]
	deleteCategories *connect.Client[v1.DelCategoriesRequest, v1.DelCategoriesResponse]
}

// ListCategories calls category.v1.CategoryService.ListCategories.
func (c *categoryServiceClient) ListCategories(ctx context.Context, req *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return c.listCategories.CallUnary(ctx, req)
}

// AddCategories calls category.v1.CategoryService.AddCategories.
func (c *categoryServiceClient) AddCategories(ctx context.Context, req *connect.Request[v1.AddCategoriesRequest]) (*connect.Response[v1.AddCategoriesResponse], error) {
	return c.addCategories.CallUnary(ctx, req)
}

// DeleteCategories calls category.v1.CategoryService.DeleteCategories.
func (c *categoryServiceClient) DeleteCategories(ctx context.Context, req *connect.Request[v1.DelCategoriesRequest]) (*connect.Response[v1.DelCategoriesResponse], error) {
	return c.deleteCategories.CallUnary(ctx, req)
}

// CategoryServiceHandler is an implementation of the category.v1.CategoryService service.
type CategoryServiceHandler interface {
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	AddCategories(context.Context, *connect.Request[v1.AddCategoriesRequest]) (*connect.Response[v1.AddCategoriesResponse], error)
	DeleteCategories(context.Context, *connect.Request[v1.DelCategoriesRequest]) (*connect.Response[v1.DelCategoriesResponse], error)
}

// NewCategoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCategoryServiceHandler(svc CategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	categoryServiceMethods := v1.File_category_v1_category_proto.Services().ByName("CategoryService").Methods()
	categoryServiceListCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceListCategoriesProcedure,
		svc.ListCategories,
		connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceAddCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceAddCategoriesProcedure,
		svc.AddCategories,
		connect.WithSchema(categoryServiceMethods.ByName("AddCategories")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceDeleteCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceDeleteCategoriesProcedure,
		svc.DeleteCategories,
		connect.WithSchema(categoryServiceMethods.ByName("DeleteCategories")),
		connect.WithHandlerOptions(opts...),
	)
	return "/category.v1.CategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CategoryServiceListCategoriesProcedure:
			categoryServiceListCategoriesHandler.ServeHTTP(w, r)
		case CategoryServiceAddCategoriesProcedure:
			categoryServiceAddCategoriesHandler.ServeHTTP(w, r)
		case CategoryServiceDeleteCategoriesProcedure:
			categoryServiceDeleteCategoriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCategoryServiceHandler struct{}

func (UnimplementedCategoryServiceHandler) ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("category.v1.CategoryService.ListCategories is not implemented"))
}

func (UnimplementedCategoryServiceHandler) AddCategories(context.Context, *connect.Request[v1.AddCategoriesRequest]) (*connect.Response[v1.AddCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("category.v1.CategoryService.AddCategories is not implemented"))
}

func (UnimplementedCategoryServiceHandler) DeleteCategories(context.Context, *connect.Request[v1.DelCategoriesRequest]) (*connect.Response[v1.DelCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("category.v1.CategoryService.DeleteCategories is not implemented"))
}
