version: '3'

vars:
  cu: '{{ if eq .OS "Windows_NT" }}coreutils{{ else }}{{ end }}'
  EXE: '{{ if eq .OS "Windows_NT" }}.exe{{ else }}{{ end }}'

  CORE_DIR: core
  # Directory for Go source commands
  GO_CMD_DIR: cmd
  # Directory for dev builds
  DEV_BUILD: .dev

  UI_DIR: brie
  DOCKMAN_IMAGE_BASE: gouda


tasks:
  default:
    desc: "Lists all available tasks"
    cmds:
      - task --list --sort=alphanumeric

  init:
    desc: "Setup dockman dev environment should be run only once after cloning the project."
    deps:
      - go:tidy
      - ui:tidy

  clean:
    desc: "Removes all files in {{.DEV_BUILD }}"
    cmds:
      - coreutils rm -rf {{.DEV_BUILD }}/*

  ui:img:
    desc: "Calls the image generator for flutter"
    dir: "{{ .UI_DIR }}"
    cmds:
      - flutter pub run flutter_launcher_icons

  ui:tidy:
    desc: "Cleans up and initializes the flutter app dir"
    dir: "{{ .UI_DIR }}"
    cmds:
      - flutter clean
      - flutter pub get

  go:tidy:
    desc: "Calls go mod tidy in {{.CORE_DIR}}"
    dir: "{{.CORE_DIR}}"
    cmds:
      - go mod tidy -v -x

  go:b:*:
    label: "go:b:{{ .CMD_NAME }}"
    dir: "{{ .CORE_DIR }}"
    desc: "Builds a Go target. Usage: task go:<target>"
    vars:
      CMD_NAME: "{{index .MATCH 0}}"
      OUT_PATH: "../{{ .DEV_BUILD }}/{{ .CMD_NAME }}"
      BIN_OUT: "{{ .OUT_PATH }}/{{ .CMD_NAME }}{{ .EXE }}"
    cmds:
      - '{{ .cu }} mkdir -p {{ .OUT_PATH }}'
      - go build -v -o {{ .OUT_PATH }} ./{{.GO_CMD_DIR}}/{{.CMD_NAME}}
    summary: |
      Builds the '{{.CMD_NAME}}' Go command.
      Source: '{{.GO_CMD_DIR}}/{{.CMD_NAME}}'
      Output: '{{.DEV_BUILD }}/{{.CMD_NAME}}{{.EXE}}'

  go:*:
    desc: "Builds and runs a Go target. Usage: task go:r:<target>"
    vars:
      CMD_NAME: "{{index .MATCH 0}}"
      EXE: '{{if eq OS "windows"}}.exe{{end}}'
    dir: "{{ .DEV_BUILD }}/{{ .CMD_NAME }}"
    cmds:
      - task: go:b:{{.CMD_NAME}}
      - ./{{.CMD_NAME}}{{.EXE}}

  dk:
    desc: "Builds and runs the main image"
    vars:
      IMAGE: "{{ .DOCKMAN_IMAGE_BASE }}:dev"
    cmds:
      - docker build . -t {{.IMAGE}}
      - docker run --rm
        -v ./{{.DEV_BUILD}}/develop/config:/app/config
        -e GOUDA_LOG_LEVEL=debug
        -p 9860:9862
        {{.IMAGE}}

  dk:prune:
    desc: "Prune docker images."
    cmds:
      - docker image prune -f

  c:tr:
    desc: "start a temp transmission client"
    vars:
      SAVE_DIR: "build/transmission"
    cmds:
      - coreutils mkdir -p {{ .SAVE_DIR }}
      - docker run --rm
        -e PUID=1000
        -e PGID=1000
        -e USER=admin
        -e PASS=admin
        -e PEERPORT=9161
        -v "./{{ .SAVE_DIR }}:/media"
        -p 9092:9091
        lscr.io/linuxserver/transmission:latest

  c:qb:
    desc: "start a temp qbittorrent client"
    vars:
      SAVE_DIR: "build/qbittorrent"
    cmds:
      - coreutils mkdir -p {{ .SAVE_DIR }}
      - docker run --rm
        --name qbittorrent
        -e PUID=1000
        -e PGID=1000
        -e TZ=Etc/UTC
        -e WEBUI_PORT=8722
        -e TORRENTING_PORT=17693
        -v "./{{ .SAVE_DIR }}:/downloads"
        -p 8722:8722
        -p 17693:17693
        -p 17693:17693/udp
        lscr.io/linuxserver/qbittorrent:latest

  c:dg:
    desc: "start a temp deluge client"
    vars:
      SAVE_DIR: "build/deluge"
    cmds:
      - coreutils mkdir -p {{ .SAVE_DIR }}
      - docker run --rm
        --name deluge
        -e PUID=1000
        -e PGID=1000
        -e TZ=Etc/UTC
        -v "./{{ .SAVE_DIR }}:/downloads"
        -p 8112:8112
        -p 17693:17693
        -p 17693:17693/udp
        -p 58846:58846
        linuxserver/deluge:latest
