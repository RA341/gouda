// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file category/v1/category.proto (package category.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message category.v1.ListCategoriesRequest
 */
export class ListCategoriesRequest extends Message<ListCategoriesRequest> {
  constructor(data?: PartialMessage<ListCategoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category.v1.ListCategoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCategoriesRequest {
    return new ListCategoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCategoriesRequest {
    return new ListCategoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCategoriesRequest {
    return new ListCategoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCategoriesRequest | PlainMessage<ListCategoriesRequest> | undefined, b: ListCategoriesRequest | PlainMessage<ListCategoriesRequest> | undefined): boolean {
    return proto3.util.equals(ListCategoriesRequest, a, b);
  }
}

/**
 * @generated from message category.v1.ListCategoriesResponse
 */
export class ListCategoriesResponse extends Message<ListCategoriesResponse> {
  /**
   * @generated from field: repeated category.v1.Category categories = 1;
   */
  categories: Category[] = [];

  constructor(data?: PartialMessage<ListCategoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category.v1.ListCategoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "message", T: Category, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCategoriesResponse {
    return new ListCategoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCategoriesResponse {
    return new ListCategoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCategoriesResponse {
    return new ListCategoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCategoriesResponse | PlainMessage<ListCategoriesResponse> | undefined, b: ListCategoriesResponse | PlainMessage<ListCategoriesResponse> | undefined): boolean {
    return proto3.util.equals(ListCategoriesResponse, a, b);
  }
}

/**
 * @generated from message category.v1.AddCategoriesRequest
 */
export class AddCategoriesRequest extends Message<AddCategoriesRequest> {
  /**
   * @generated from field: string category = 1;
   */
  category = "";

  constructor(data?: PartialMessage<AddCategoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category.v1.AddCategoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCategoriesRequest {
    return new AddCategoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCategoriesRequest {
    return new AddCategoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCategoriesRequest {
    return new AddCategoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddCategoriesRequest | PlainMessage<AddCategoriesRequest> | undefined, b: AddCategoriesRequest | PlainMessage<AddCategoriesRequest> | undefined): boolean {
    return proto3.util.equals(AddCategoriesRequest, a, b);
  }
}

/**
 * @generated from message category.v1.AddCategoriesResponse
 */
export class AddCategoriesResponse extends Message<AddCategoriesResponse> {
  constructor(data?: PartialMessage<AddCategoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category.v1.AddCategoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddCategoriesResponse {
    return new AddCategoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddCategoriesResponse {
    return new AddCategoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddCategoriesResponse {
    return new AddCategoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddCategoriesResponse | PlainMessage<AddCategoriesResponse> | undefined, b: AddCategoriesResponse | PlainMessage<AddCategoriesResponse> | undefined): boolean {
    return proto3.util.equals(AddCategoriesResponse, a, b);
  }
}

/**
 * @generated from message category.v1.DelCategoriesRequest
 */
export class DelCategoriesRequest extends Message<DelCategoriesRequest> {
  /**
   * @generated from field: category.v1.Category category = 1;
   */
  category?: Category;

  constructor(data?: PartialMessage<DelCategoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category.v1.DelCategoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "message", T: Category },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelCategoriesRequest {
    return new DelCategoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelCategoriesRequest {
    return new DelCategoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelCategoriesRequest {
    return new DelCategoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DelCategoriesRequest | PlainMessage<DelCategoriesRequest> | undefined, b: DelCategoriesRequest | PlainMessage<DelCategoriesRequest> | undefined): boolean {
    return proto3.util.equals(DelCategoriesRequest, a, b);
  }
}

/**
 * @generated from message category.v1.DelCategoriesResponse
 */
export class DelCategoriesResponse extends Message<DelCategoriesResponse> {
  constructor(data?: PartialMessage<DelCategoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category.v1.DelCategoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelCategoriesResponse {
    return new DelCategoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelCategoriesResponse {
    return new DelCategoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelCategoriesResponse {
    return new DelCategoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DelCategoriesResponse | PlainMessage<DelCategoriesResponse> | undefined, b: DelCategoriesResponse | PlainMessage<DelCategoriesResponse> | undefined): boolean {
    return proto3.util.equals(DelCategoriesResponse, a, b);
  }
}

/**
 * @generated from message category.v1.Category
 */
export class Category extends Message<Category> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  /**
   * @generated from field: string category = 2;
   */
  category = "";

  constructor(data?: PartialMessage<Category>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category.v1.Category";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Category {
    return new Category().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJsonString(jsonString, options);
  }

  static equals(a: Category | PlainMessage<Category> | undefined, b: Category | PlainMessage<Category> | undefined): boolean {
    return proto3.util.equals(Category, a, b);
  }
}

