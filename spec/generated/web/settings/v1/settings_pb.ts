// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file settings/v1/settings.proto (package settings.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message settings.v1.UpdateSettingsResponse
 */
export class UpdateSettingsResponse extends Message<UpdateSettingsResponse> {
  constructor(data?: PartialMessage<UpdateSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.UpdateSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSettingsResponse | PlainMessage<UpdateSettingsResponse> | undefined, b: UpdateSettingsResponse | PlainMessage<UpdateSettingsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSettingsResponse, a, b);
  }
}

/**
 * @generated from message settings.v1.ListSettingsResponse
 */
export class ListSettingsResponse extends Message<ListSettingsResponse> {
  constructor(data?: PartialMessage<ListSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.ListSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSettingsResponse {
    return new ListSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSettingsResponse {
    return new ListSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSettingsResponse {
    return new ListSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSettingsResponse | PlainMessage<ListSettingsResponse> | undefined, b: ListSettingsResponse | PlainMessage<ListSettingsResponse> | undefined): boolean {
    return proto3.util.equals(ListSettingsResponse, a, b);
  }
}

/**
 * @generated from message settings.v1.Settings
 */
export class Settings extends Message<Settings> {
  /**
   * General settings
   *
   * @generated from field: string api_key = 1;
   */
  apiKey = "";

  /**
   * @generated from field: string server_port = 2;
   */
  serverPort = "";

  /**
   * @generated from field: int32 download_check_timeout = 3;
   */
  downloadCheckTimeout = 0;

  /**
   * Folder settings
   *
   * @generated from field: string complete_folder = 4;
   */
  completeFolder = "";

  /**
   * @generated from field: string download_folder = 5;
   */
  downloadFolder = "";

  /**
   * @generated from field: string torrents_folder = 6;
   */
  torrentsFolder = "";

  /**
   * User settings
   *
   * @generated from field: string username = 7;
   */
  username = "";

  /**
   * @generated from field: string password = 8;
   */
  password = "";

  /**
   * @generated from field: int32 user_uid = 9;
   */
  userUid = 0;

  /**
   * @generated from field: int32 group_uid = 10;
   */
  groupUid = 0;

  /**
   * Torrent settings
   *
   * @generated from field: string torrent_host = 11;
   */
  torrentHost = "";

  /**
   * @generated from field: string torrent_name = 12;
   */
  torrentName = "";

  /**
   * @generated from field: string torrent_password = 13;
   */
  torrentPassword = "";

  /**
   * @generated from field: string torrent_protocol = 14;
   */
  torrentProtocol = "";

  /**
   * @generated from field: string torrent_user = 15;
   */
  torrentUser = "";

  constructor(data?: PartialMessage<Settings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "settings.v1.Settings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "server_port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "download_check_timeout", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "complete_folder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "download_folder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "torrents_folder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "user_uid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "group_uid", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "torrent_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "torrent_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "torrent_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "torrent_protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "torrent_user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Settings {
    return new Settings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Settings {
    return new Settings().fromJsonString(jsonString, options);
  }

  static equals(a: Settings | PlainMessage<Settings> | undefined, b: Settings | PlainMessage<Settings> | undefined): boolean {
    return proto3.util.equals(Settings, a, b);
  }
}

